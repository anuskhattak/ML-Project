# -*- coding: utf-8 -*-
"""Copy_Email_app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IevGtOgBeEPL-_jEYoAtQrBEbmoUBi8O
"""



import streamlit as st
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

df = pd.read_csv('mail_data.csv.csv')
df.head(2)

df.loc[df['Category'] == 'spam', 'Category'] = 0
df.loc[df['Category'] == 'ham', 'Category'] = 1

X = df['Message']
y = df['Category'].astype('int')

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature extraction
vectorizer = TfidfVectorizer(min_df=1, stop_words='english', lowercase=True)
X_train_features = vectorizer.fit_transform(X_train)
X_test_features = vectorizer.transform(X_test)

# Train model
model = LogisticRegression(max_iter=1000)
model.fit(X_train_features, y_train)

# Accuracy
train_pred = model.predict(X_train_features)
test_pred = model.predict(X_test_features)

train_acc = accuracy_score(y_train, train_pred)
test_acc = accuracy_score(y_test, test_pred)

# Streamlit UI
st.set_page_config(page_title="Spam Detector", page_icon="üìß", layout="centered")

# Background styling
page_bg = """
<style>
[data-testid="stAppViewContainer"] {
    background-image: linear-gradient(to right top, #6a11cb, #2575fc);
    background-size: cover;
    color: white;
}
[data-testid="stHeader"] {
    background: rgba(0,0,0,0);
}
h1, h2, h3, h4, h5, h6, p {
    color: white !important;
}
</style>
"""

st.markdown(page_bg, unsafe_allow_html=True)

st.title("üìß Spam Email Detector")
st.write("Paste an email / message below and check if it is **Spam** or **Ham**.")

# Show accuracy
st.metric("‚úÖ Training Accuracy", f"{train_acc*100:.2f}%")
st.metric("‚úÖ Testing Accuracy", f"{test_acc*100:.2f}%")

# Input box
user_input = st.text_area("‚úçÔ∏è Enter your message here:")

if st.button("üîç Detect"):
    if user_input.strip() != "":
        input_features = vectorizer.transform([user_input])
        prediction = model.predict(input_features)[0]

        if prediction == 1:
            st.success("‚úÖ This Email is **HAM (Not Spam)**")
        else:
            st.error("üö® This Email is **SPAM**")
    else:
        st.warning("‚ö†Ô∏è Please enter some text first!")



